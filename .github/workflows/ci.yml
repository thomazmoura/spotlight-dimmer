name: CI

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Run tests
        run: cargo test --lib --verbose

      - name: Run doc tests
        run: cargo test --doc --verbose
        continue-on-error: true  # Doc tests might not exist yet

  clippy:
    name: Clippy
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -W clippy::all -A dead_code

  fmt:
    name: Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt

      - name: Check formatting
        run: cargo fmt --all -- --check

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        target: [x86_64-pc-windows-msvc]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Build binaries
        run: cargo build --release --bin spotlight-dimmer --bin spotlight-dimmer-config

      - name: Check binary sizes
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $mainSize = (Get-Item target/release/spotlight-dimmer.exe).Length
          $configSize = (Get-Item target/release/spotlight-dimmer-config.exe).Length
          Write-Output "spotlight-dimmer.exe: $([math]::Round($mainSize/1KB, 2)) KB"
          Write-Output "spotlight-dimmer-config.exe: $([math]::Round($configSize/1KB, 2)) KB"
