name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  changelog:
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.changelog.outputs.release-notes }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.tag }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          # Extract unreleased section from CHANGELOG.md
          python3 << 'EOF'
          import re
          import sys

          try:
              with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
                  content = f.read()

              # Find the unreleased section
              unreleased_match = re.search(r'## \[Unreleased\]\s*(.*?)\s*(?=## \[|$)', content, re.DOTALL)

              if unreleased_match:
                  unreleased_content = unreleased_match.group(1).strip()
                  if unreleased_content:
                      # Clean up the content and prepare for GitHub release
                      release_notes = unreleased_content

                      # Write to GitHub output
                      with open('release_notes.txt', 'w', encoding='utf-8') as f:
                          f.write(release_notes)

                      print("‚úÖ Extracted release notes from changelog")
                  else:
                      print("‚ö†Ô∏è No changes found in unreleased section")
                      with open('release_notes.txt', 'w', encoding='utf-8') as f:
                          f.write("This release includes various improvements and bug fixes.")
              else:
                  print("‚ö†Ô∏è No unreleased section found in changelog")
                  with open('release_notes.txt', 'w', encoding='utf-8') as f:
                      f.write("This release includes various improvements and bug fixes.")

          except FileNotFoundError:
              print("‚ö†Ô∏è CHANGELOG.md not found")
              with open('release_notes.txt', 'w', encoding='utf-8') as f:
                  f.write("This release includes various improvements and bug fixes.")
          EOF

          {
            echo "release-notes<<EOF"
            cat release_notes.txt
            echo "EOF"
          } >> $GITHUB_OUTPUT

  build-and-release:
    needs: changelog
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: ''
            target: 'x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build

      - name: Build and release
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ needs.changelog.outputs.version && format('v{0}', needs.changelog.outputs.version) || github.ref_name }}
          releaseName: 'Spotlight Dimmer v${{ needs.changelog.outputs.version || github.ref_name }}'
          releaseBody: |
            ${{ needs.changelog.outputs.release-notes }}

            ## Installation

            ### Windows Users (Recommended)
            Download and run the `.msi` installer for the best experience with perfect transparency and all features.

            ### Developers/Advanced Users
            You can also install via Cargo:
            ```bash
            cargo install spotlight-dimmer
            ```

            ## What's Spotlight Dimmer?

            Spotlight Dimmer dims inactive displays to help you focus on the active one. Perfect for multi-monitor setups!

            - üéØ **Focus Enhancement**: Dims all displays except the one with your active window
            - üîÑ **Real-time Monitoring**: Instantly detects when you switch between displays
            - üëª **Click-through Overlays**: Dimming overlays don't interfere with your workflow
            - üöÄ **Auto-startup**: Starts dimming automatically when launched
            - ‚öôÔ∏è  **System Tray Control**: Easy toggle from your system tray

            ---

            ü§ñ *Generated with [Claude Code](https://claude.com/claude-code)*
          releaseDraft: false
          prerelease: false
          args: ${{ matrix.args }}

  update-changelog:
    needs: [changelog, build-and-release]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Update changelog
        run: |
          # Update CHANGELOG.md to move unreleased content to new version
          python3 << 'EOF'
          import re
          import datetime

          version = "${{ needs.changelog.outputs.version }}"
          today = datetime.date.today().strftime("%Y-%m-%d")

          try:
              with open('CHANGELOG.md', 'r', encoding='utf-8') as f:
                  content = f.read()

              # Replace [Unreleased] section with new version and empty unreleased section
              unreleased_pattern = r'## \[Unreleased\]\s*(.*?)\s*(?=## \[)'

              def replace_unreleased(match):
                  unreleased_content = match.group(1).strip()
                  if unreleased_content:
                      return "## [Unreleased]\n\n## [{}] - {}\n\n{}".format(version, today, unreleased_content)
                  else:
                      return "## [Unreleased]\n\n## [{}] - {}".format(version, today)

              updated_content = re.sub(unreleased_pattern, replace_unreleased, content, flags=re.DOTALL)

              # If no unreleased section found, add one at the top
              if updated_content == content:
                  # Find the first version section and insert before it
                  version_pattern = r'(## \[)'
                  updated_content = re.sub(version_pattern, '## [Unreleased]\\n\\n## [{}] - {}\\n\\n\\1'.format(version, today), content, count=1)

              with open('CHANGELOG.md', 'w', encoding='utf-8') as f:
                  f.write(updated_content)

              print("‚úÖ Updated changelog for version {}".format(version))

          except Exception as e:
              print("‚ùå Error updating changelog: {}".format(e))
          EOF

      - name: Commit changelog update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update CHANGELOG.md for release v${{ needs.changelog.outputs.version }}"
            git push
          fi
