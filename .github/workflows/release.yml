name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: short

jobs:
  changelog:
    runs-on: ubuntu-latest
    outputs:
      release-notes: ${{ steps.changelog.outputs.release-notes }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get version from tag
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ inputs.tag }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

      - name: Extract changelog
        id: changelog
        run: |
          # Extract unreleased section from CHANGELOG.md using external script
          python3 .github/scripts/extract_changelog.py

  build-and-release:
    needs: changelog
    permissions:
      contents: write
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2

      - name: Run tests
        run: cargo test --lib --verbose

      - name: Build binaries
        run: cargo build --release --bin spotlight-dimmer --bin spotlight-dimmer-config

      - name: Install cargo-packager
        run: cargo install --locked cargo-packager

      - name: Install NSIS
        shell: pwsh
        run: choco install nsis -y --no-progress

      - name: Build NSIS installer
        run: cargo packager --release

      - name: Prepare installer asset
        shell: pwsh
        run: |
          $version = "${{ needs.changelog.outputs.version }}"
          if (-not $version) {
            $version = "${{ github.ref_name }}"
            if ($version.StartsWith("v")) {
              $version = $version.Substring(1)
            }
          }

          $packagerDir = "target/release/packager"
          if (-not (Test-Path $packagerDir)) {
            Write-Host "::error::Packager output directory '$packagerDir' not found"
            throw "Packager output missing"
          }

          $installer = Get-ChildItem -Path $packagerDir -Recurse -Filter '*.exe' | Where-Object { $_.Name -match 'setup\.exe$' } | Select-Object -First 1
          if (-not $installer) {
            Write-Host "::error::NSIS installer not found under target/release/packager"
            Get-ChildItem -Path target/release/packager -Recurse -Force | Format-List FullName
            throw "NSIS installer missing"
          }

          $assetName = "spotlight-dimmer-v$version-installer.exe"
          Copy-Item -Path $installer.FullName -Destination $assetName -Force

          "INSTALLER_ASSET_PATH=$assetName" | Out-File -FilePath $Env:GITHUB_ENV -Append

      - name: Upload installer artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ env.INSTALLER_ASSET_PATH }}
          retention-days: 1

      - name: Upload binaries as artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            target/release/spotlight-dimmer.exe
            target/release/spotlight-dimmer-config.exe
          retention-days: 1

      - name: Create ZIP archive
        shell: pwsh
        run: |
          $version = "${{ needs.changelog.outputs.version }}"
          if (-not $version) {
            $version = "${{ github.ref_name }}"
            if ($version.StartsWith("v")) {
              $version = $version.Substring(1)
            }
          }

          $zipName = "spotlight-dimmer-v$version-windows-x86_64.zip"
          Compress-Archive -Path target/release/spotlight-dimmer.exe, target/release/spotlight-dimmer-config.exe, spotlight-dimmer-icon.ico, spotlight-dimmer-icon-paused.ico -DestinationPath $zipName
          "ZIP_ASSET_PATH=$zipName" | Out-File -FilePath $Env:GITHUB_ENV -Append

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.changelog.outputs.version && format('v{0}', needs.changelog.outputs.version) || github.ref_name }}
          name: 'Spotlight Dimmer v${{ needs.changelog.outputs.version || github.ref_name }}'
          body: |
            ${{ needs.changelog.outputs.release-notes }}

            ## Installation

            ### Windows Installer (Recommended)
            Download the `.exe` installer below and follow the setup wizard. It installs Spotlight Dimmer with Start Menu shortcuts, desktop integration, and an uninstaller entry in Windows Settings.

            ### Portable ZIP (Alternative)
            Download the ZIP file if you prefer a portable installation. Extract all files to the same folder to keep the icons alongside the executables.

            ### Via Cargo
            ```bash
            cargo install --git https://github.com/thomazmoura/spotlight-dimmer --branch main spotlight-dimmer
            ```

            ## What's Spotlight Dimmer?

            Spotlight Dimmer dims inactive displays to help you focus on the active one. Perfect for multi-monitor setups!

            - üéØ **Ultra-lightweight**: Only ~7.6 MB RAM usage
            - üîÑ **Real-time Monitoring**: Instantly detects window focus changes (100ms polling)
            - üëª **Click-through Overlays**: Dimming overlays don't interfere with your workflow
            - ‚ö° **Native Windows API**: No browser engine overhead, instant startup
            - ‚öôÔ∏è **Auto-reload Config**: Changes detected within 2 seconds, no restart needed

            ---

            ü§ñ *Generated with [Claude Code](https://claude.com/claude-code)*
          draft: false
          prerelease: false
          files: |
            ${{ env.INSTALLER_ASSET_PATH }}
            ${{ env.ZIP_ASSET_PATH }}

  publish-cargo:
    needs: [changelog, build-and-release]
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
        run: cargo publish --allow-dirty

  publish-npm:
    needs: [changelog, build-and-release]
    if: always()
    runs-on: windows-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Download pre-built binaries
        uses: actions/download-artifact@v4
        with:
          name: windows-binaries
          path: target/release/

      - name: Prepare npm package
        shell: pwsh
        run: |
          # Copy executables to bin directory
          Copy-Item target/release/spotlight-dimmer.exe bin/
          Copy-Item target/release/spotlight-dimmer-config.exe bin/

          # Copy icon files to bin directory
          Copy-Item spotlight-dimmer-icon.ico bin/
          Copy-Item spotlight-dimmer-icon-paused.ico bin/

          Write-Host "Package contents ready for npm publish"

      - name: Publish to npm
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npm publish --provenance --access public

  update-changelog:
    needs: [changelog, build-and-release]
    runs-on: ubuntu-latest
    if: success()
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          ref: main

      - name: Update changelog
        run: |
          # Update CHANGELOG.md to move unreleased content to new version using external script
          python3 .github/scripts/update_changelog.py "${{ needs.changelog.outputs.version }}"

      - name: Commit changelog update
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "Update CHANGELOG.md for release v${{ needs.changelog.outputs.version }}"
            git push
          fi
